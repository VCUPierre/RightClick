{"version":3,"sources":["assets/Logo.png","assets/LogoWhite.png","Home/components/SocialLink/SocialLink.js","Home/components/SocialLinks/SocialLinks.js","Home/components/ProfilePic/ProfilePic.js","Home/components/Profile/Profile.js","Home/components/ModalHeader/ModalHeader.js","Home/components/MP4video/MP4video.js","Home/components/ModalMedia/ModalMedia.js","Home/components/ModalLinks/ModalLinks.js","Home/components/LinksModal/LinksModal.js","Home/components/BannerTimer/BannerTimer.js","Home/components/Banner/Banner.js","Home/components/InternalLinks/InternalLinks.js","Home/components/ExternalLinks/ExternalLinks.js","Home/components/ItemLinks/ItemLinks.js","Home/components/Still_External/Still_External.js","Home/components/Slideshow/CustomDotGroup.js","Home/components/Slideshow/ImageCarousel.js","Home/components/Slideshow/Slideshow.js","Home/components/Bio/BioModal.js","Home/components/Bio/Bio.js","Home/components/Links/Links.js","Home/components/LinkGroup/LinkGroup.js","Home/components/Home.js","assets/usersData/RazorRamon/data.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","boxed","surrounded","SocialLink","link","href","Icon","className","secondaryColor","name","iconName","inverted","circular","bordered","color","SocialLinks","socialLinks","group","map","i","key","ProfilePic","src","Image","rounded","useStyles","createUseStyles","customFont","props","Profile","profileImage","profileTitle","classes","Header","as","textAlign","style","fontSize","title","Grid","Row","Column","ModalHeader","modalAlternativeText","text","MP4video","w","h","poster","video","dangerouslySetInnerHTML","__html","ModalMedia","deviceSize","type","dSize","vidPoster","wrapped","size","url","width","height","whichMedia","mainMedia","videoPoster","Modal","Description","mediaText","ModalLinks","Button","fluid","LinksModal","coloredButton","buttonColor","trigger","fontColor","closeIcon","centered","columns","removed","Content","image","additionalLinks","element","BannerTimer","dateTime","completeText","Completionist","date","renderer","days","hours","minutes","seconds","completed","zeroPad","Banner","bannerSide","timer","altColor","Label","ribbon","InternalLinks","featured","featuredText","featuredColor","featuredTimerDate","featuredTimerText","featuredAltStyle","ExternalLinks","ItemLinks","Still_External","CustomDotGroup","slides","Container","Group","Array","keys","slide","Dot","icon","defaultProps","ImageCarousel","collection","linkType","useState","open","setOpen","dummyHeaderProps","naturalSlideWidth","naturalSlideHeight","totalSlides","length","interval","speed","isPlaying","img","index","onClick","tag","Divider","onClose","onOpen","data","Slideshow","BioModal","bioContent","x","header","Subheader","content","subHeader","Bio","Links","spaced","linkSpaced","colored","Segment","raised","additionalStyle","colorOveride","LinkGroup","links","groupColor","startsWith","groupName","whichLogo","logo","LogoWhite","LogoColor","Home","linkGroups","background","GridColumn","linkData","logoLink","basic","logoActiveLink","target","TITLE","BACKGROUND","imageLink","SOCIAL_LINKS","surroundedInColor","LINK_GROUP_1","groupFont","typeAction","internal","pinned","App","xsScreen","useMediaPredicate","mdScreen","lgScreen","Helmet","fonts","font","weights","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.ce0e929e.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/Logo.d9d4f134.png\";","module.exports = __webpack_public_path__ + \"static/media/LogoWhite.17285244.png\";","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Icon } from 'semantic-ui-react';\nimport './SocialLink.css';\n\nfunction circled(surrounded) {\n    return surrounded === 'circular' ? true : false;\n}\n\nfunction boxed(surrounded) {\n    return surrounded === 'bordered' ? true : false;\n}\n\nconst SocialLink = ({ link }) => {\n    return (\n        <a href={link.link}>\n            <Icon\n                className={`RLSocialPad ${\n                    link.secondaryColor ? link.secondaryColor : ''\n                }`}\n                name={link.iconName}\n                inverted={link.inverted}\n                circular={circled(link.surrounded)}\n                bordered={boxed(link.surrounded)}\n                color={link.color}\n            />\n        </a>\n    );\n};\n\nSocialLink.propTypes = {\n    link: PropTypes.object,\n};\n\nexport default SocialLink;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport SocialLink from '../SocialLink/SocialLink';\n\nconst SocialLinks = ({ socialLinks }) => (\n    <div>\n        {socialLinks.group.map((link, i) => {\n            return <SocialLink key={`social-link-${i + 1}`} link={link} />;\n        })}\n    </div>\n);\n\nSocialLinks.propTypes = {\n    socialLinks: PropTypes.object,\n};\n\nexport default SocialLinks;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Image } from 'semantic-ui-react';\nimport './style.css';\n\nconst ProfilePic = ({ src }) => (\n    <Image src={src} className=\"RLFixCenter RLOneSize\" rounded />\n);\n\nProfilePic.propTypes = {\n    src: PropTypes.string,\n};\n\nexport default ProfilePic;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Header, Grid } from 'semantic-ui-react';\nimport { createUseStyles } from 'react-jss';\nimport SocialLinks from '../SocialLinks/SocialLinks';\nimport ProfilePic from '../ProfilePic/ProfilePic';\nimport './profile.css';\n\nconst useStyles = createUseStyles({\n    customFont: {\n        'font-family': (props) => [props.customFont, '!important'],\n    },\n});\n\nconst Profile = ({ socialLinks, profileImage, profileTitle, ...props }) => {\n    const classes = useStyles(props);\n\n    return (\n        <div>\n            <Header\n                as=\"h1\"\n                textAlign=\"center\"\n                className={`RCTopPadding RCMarginBottom ${profileTitle.color} ${classes.customFont}`}\n                style={{\n                    fontSize: '2.5em',\n                }}\n            >\n                {profileTitle.title}\n            </Header>\n            <Header as=\"h2\" textAlign=\"center\" className=\"RCMarginTop\">\n                <Grid textAlign=\"center\" className=\"RCSpace-5\">\n                    <Grid.Row\n                        className={`RCNoTopPadding ${\n                            // will need to enforce 'all or nothing' on surrounding social links\n                            socialLinks.group[0].surrounded\n                                ? 'RCMarginBottom-2'\n                                : ''\n                        }`}\n                    >\n                        <SocialLinks socialLinks={socialLinks} />\n                    </Grid.Row>\n                    <Grid.Row className=\"RCNoTopPadding\">\n                        <Grid.Column textAlign=\"center\">\n                            <ProfilePic src={profileImage} />\n                        </Grid.Column>\n                    </Grid.Row>\n                </Grid>\n            </Header>\n        </div>\n    );\n};\n\nProfile.propTypes = {\n    socialLinks: PropTypes.object,\n    profileImage: PropTypes.string,\n    profileTitle: PropTypes.object,\n};\n\nexport default Profile;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Header } from 'semantic-ui-react';\nimport './ModalHeader.css';\n\nconst ModalHeader = ({ link }) => {\n    return (\n        <Header\n            as=\"h1\"\n            textAlign=\"center\"\n            className=\"RCborderNone RCtopPushoff\"\n        >\n            {link.modalAlternativeText.text\n                ? link.modalAlternativeText.text\n                : link.name}\n        </Header>\n    );\n};\n\nModalHeader.propTypes = {\n    link: PropTypes.object,\n};\n\nexport default ModalHeader;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst MP4video = ({ w, h, poster, video }) => (\n    <div\n        dangerouslySetInnerHTML={{\n            __html: `\n            <video\n            loop\n            muted\n            playsinline\n            autoplay\n            style=\"width:${w}; height:${h}\"\n            poster=\"${poster}\"\n            >\n            <source type=\"video/mp4\" src=\"${video}\" />\n            </video>`,\n        }}\n    />\n);\n\nMP4video.propTypes = {\n    w: PropTypes.string,\n    h: PropTypes.string,\n    poster: PropTypes.string,\n    video: PropTypes.string,\n};\n\nexport default MP4video;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { createUseStyles } from 'react-jss';\nimport { Modal, Image } from 'semantic-ui-react';\nimport ReactPlayer from 'react-player';\nimport MP4video from '../MP4video/MP4video';\nimport './ModalMedia.css';\n\n// use react-player for video that doesn't need to auto play\n\nconst useStyles = createUseStyles({\n    customFont: {\n        'font-family': (props) =>\n            props.customFont\n                ? [props.customFont, '!important']\n                : ['Lato', '!important'],\n    },\n});\n\nfunction whichMedia(type, link, dSize, vidPoster) {\n    if (type === 'still') {\n        return <Image wrapped size=\"medium\" src={link} />;\n    } else if (type === 'mp4') {\n        return dSize === 'xs' || 'md' ? (\n            <MP4video video={link} w=\"100%\" h=\"100%\" poster={vidPoster} />\n        ) : (\n            <MP4video video={link} w=\"50%\" h=\"50%\" />\n        );\n    }\n    return <ReactPlayer url={link} width=\"100%\" height=\"100%\" />;\n}\n\nconst ModalMedia = ({ link, deviceSize, ...props }) => {\n    const classes = useStyles(props);\n\n    return (\n        <div className=\"center\">\n            {whichMedia(\n                link.mainMedia.type,\n                link.mainMedia.link,\n                deviceSize,\n                link.mainMedia.videoPoster\n            )}\n            <Modal.Description className=\"pushOff-y\">\n                <h3 className={classes.customFont}>\n                    {link.mainMedia.mediaText}\n                </h3>\n            </Modal.Description>\n        </div>\n    );\n};\n\nModalMedia.propTypes = {\n    link: PropTypes.object,\n    deviceSize: PropTypes.string,\n};\n\nexport default ModalMedia;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Button } from 'semantic-ui-react';\nimport './ModalLinks.css';\n\nconst ModalLinks = ({ link }) => {\n    return (\n        <Button as=\"a\" href={link.link} fluid className=\"pushoffButtom\">\n            {link.name}\n        </Button>\n    );\n};\n\nModalLinks.propTypes = {\n    link: PropTypes.object,\n};\n\nexport default ModalLinks;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { createUseStyles } from 'react-jss';\nimport { Modal, Button, Grid } from 'semantic-ui-react';\nimport ModalHeader from '../ModalHeader/ModalHeader';\nimport ModalMedia from '../ModalMedia/ModalMedia';\nimport ModalLinks from '../ModalLinks/ModalLinks';\nimport './LinkModal.css';\nimport './button.css';\n\nconst useStyles = createUseStyles({\n    customFont: {\n        'font-family': (props) => props.customFont,\n    },\n});\n\nconst LinksModal = ({ link, deviceSize, ...props }) => {\n    const classes = useStyles(props);\n    const coloredButton = link.buttonColor;\n\n    return (\n        <div>\n            <Modal\n                size=\"small\"\n                trigger={\n                    <Button\n                        fluid\n                        size=\"big\"\n                        color={link.buttonColor}\n                        {...(coloredButton\n                            ? {\n                                  className: `RCPadding fontColor ${link.fontColor} ${classes.customFont}`,\n                              }\n                            : {\n                                  className: `RCPadding RCWhiteBG ${classes.customFont}`,\n                              })}\n                    >\n                        {link.name}\n                    </Button>\n                }\n                closeIcon\n            >\n                <Grid centered columns={2}>\n                    {link.modalAlternativeText.removed ? (\n                        ''\n                    ) : (\n                        <Grid.Row className=\"RCTitleFix\">\n                            <ModalHeader link={link} />\n                        </Grid.Row>\n                    )}\n                    <Grid.Row>\n                        <Modal.Content image className=\"RCCenter RCPushDown\">\n                            <ModalMedia link={link} deviceSize={deviceSize} />\n                            {link.additionalLinks\n                                ? link.additionalLinks.map((element, i) => {\n                                      return (\n                                          <ModalLinks\n                                              key={`links-modal-${i + 1}`}\n                                              link={element}\n                                          />\n                                      );\n                                  })\n                                : ' '}\n                        </Modal.Content>\n                    </Grid.Row>\n                </Grid>\n            </Modal>\n        </div>\n    );\n};\n\nLinksModal.propTypes = {\n    link: PropTypes.object,\n    deviceSize: PropTypes.string,\n};\n\nexport default LinksModal;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Countdown, { zeroPad } from 'react-countdown';\n\nconst BannerTimer = ({ dateTime, completeText }) => {\n    const Completionist = () => <span>{completeText}</span>;\n\n    const renderer = ({ days, hours, minutes, seconds, completed }) => {\n        if (completed) {\n            return <Completionist />;\n        } else {\n            return (\n                <span>\n                    {days} days {zeroPad(hours)}:{zeroPad(minutes)}:\n                    {zeroPad(seconds)}\n                </span>\n            );\n        }\n    };\n\n    return <Countdown date={dateTime} renderer={renderer} />;\n};\n\nBannerTimer.propTypes = {\n    dateTime: PropTypes.string,\n    completeText: PropTypes.string,\n};\n\nexport default BannerTimer;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Label } from 'semantic-ui-react';\nimport BannerTimer from '../BannerTimer/BannerTimer';\nimport './style.css';\n\nconst Banner = ({\n    text,\n    color,\n    bannerSide,\n    deviceSize,\n    timer,\n    completeText,\n    altColor,\n}) => {\n    return (\n        <div>\n            {timer ? (\n                <Label\n                    as=\"a\"\n                    color={color}\n                    ribbon={bannerSide ? true : false}\n                    className={`${deviceSize} ${altColor}`}\n                >\n                    {text}{' '}\n                    <BannerTimer dateTime={timer} completeText={completeText} />\n                </Label>\n            ) : (\n                <Label\n                    as=\"a\"\n                    color={color}\n                    ribbon={bannerSide ? true : false}\n                    className={`${deviceSize} ${altColor}`}\n                >\n                    {text}\n                </Label>\n            )}\n        </div>\n    );\n};\n\nBanner.propTypes = {\n    text: PropTypes.string,\n    color: PropTypes.string,\n    bannerSide: PropTypes.string,\n    deviceSize: PropTypes.string,\n    timer: PropTypes.string,\n    completeText: PropTypes.string,\n    altColor: PropTypes.string,\n};\n\nexport default Banner;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport LinksModal from '../LinksModal/LinksModal';\nimport Banner from '../Banner/Banner';\nimport '../Links/Links.css';\n\nconst InternalLinks = ({ link, deviceSize, customFont }) => {\n    return (\n        <div>\n            {link.featured ? (\n                <div>\n                    <Banner\n                        text={link.featuredText}\n                        color={link.featuredColor}\n                        bannerSide={link.bannerSide}\n                        deviceSize={\n                            deviceSize === 'xs'\n                                ? 'bannerPositionS'\n                                : deviceSize === 'md'\n                                ? 'bannerPositionM'\n                                : deviceSize === 'lg'\n                                ? 'bannerPositionL'\n                                : 'bannerPositionXL'\n                        }\n                        timer={link.featuredTimerDate}\n                        completeText={link.featuredTimerText}\n                        altColor={link.featuredAltStyle}\n                    />\n                    <LinksModal\n                        link={link}\n                        customFont={customFont}\n                        deviceSize={deviceSize}\n                    />\n                </div>\n            ) : (\n                <LinksModal\n                    link={link}\n                    customFont={customFont}\n                    deviceSize={deviceSize}\n                />\n            )}\n        </div>\n    );\n};\n\nInternalLinks.propTypes = {\n    link: PropTypes.object,\n    deviceSize: PropTypes.string,\n    customFont: PropTypes.string,\n};\n\nexport default InternalLinks;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { createUseStyles } from 'react-jss';\nimport { Button } from 'semantic-ui-react';\nimport Banner from '../Banner/Banner';\nimport '../Links/Links.css';\nimport './button.css';\n\nconst useStyles = createUseStyles({\n    customFont: {\n        'font-family': (props) => [props.customFont, '!important'],\n    },\n});\n\nconst ExternalLinks = ({ link, deviceSize, ...props }) => {\n    const classes = useStyles(props);\n    const coloredButton = link.buttonColor;\n\n    return (\n        <div>\n            {link.featured ? (\n                <div>\n                    <Banner\n                        text={link.featuredText}\n                        color={link.featuredColor}\n                        bannerSide={link.bannerSide}\n                        deviceSize={\n                            deviceSize === 'xs'\n                                ? 'bannerPositionS'\n                                : deviceSize === 'md'\n                                ? 'bannerPositionM'\n                                : deviceSize === 'lg'\n                                ? 'bannerPositionL'\n                                : 'bannerPositionXL'\n                        }\n                        timer={link.featuredTimerDate}\n                        completeText={link.featuredTimerText}\n                        altColor={link.featuredAltStyle}\n                    />\n                    <Button\n                        as=\"a\"\n                        href={link.link}\n                        {...(coloredButton\n                            ? {\n                                  className: `RCPadding ${classes.customFont} ${\n                                      link.fontColor\n                                          ? `fontColor ${link.fontColor}`\n                                          : ''\n                                  }`,\n                              }\n                            : {\n                                  className: `RCPadding RCWhiteBG ${\n                                      classes.customFont\n                                  } ${\n                                      link.fontColor\n                                          ? `fontColor ${link.fontColor}`\n                                          : ''\n                                  }`,\n                              })}\n                        color={link.buttonColor}\n                        size=\"big\"\n                        fluid\n                    >\n                        {link.name}\n                    </Button>\n                </div>\n            ) : (\n                <Button\n                    as=\"a\"\n                    href={link.link}\n                    {...(coloredButton\n                        ? {\n                              className: `RCPadding ${classes.customFont} ${\n                                  link.fontColor\n                                      ? `fontColor ${link.fontColor}`\n                                      : ''\n                              }`,\n                          }\n                        : {\n                              className: `RCPadding RCWhiteBG ${\n                                  classes.customFont\n                              } ${\n                                  link.fontColor\n                                      ? `fontColor ${link.fontColor}`\n                                      : ''\n                              }`,\n                          })}\n                    color={link.buttonColor}\n                    size=\"big\"\n                    fluid\n                >\n                    {link.name}\n                </Button>\n            )}\n        </div>\n    );\n};\n\nExternalLinks.propTypes = {\n    link: PropTypes.object,\n    deviceSize: PropTypes.string,\n};\n\nexport default ExternalLinks;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Banner from '../Banner/Banner';\nimport ModalMedia from '../ModalMedia/ModalMedia';\nimport '../Links/Links.css';\n\nconst ItemLinks = ({ link, deviceSize, customFont }) => {\n    return (\n        <div>\n            {link.featured ? (\n                <div>\n                    <Banner\n                        text={link.featuredText}\n                        color={link.featuredColor}\n                        bannerSide={link.bannerSide}\n                        deviceSize={\n                            deviceSize === 'xs'\n                                ? 'bannerPositionS'\n                                : deviceSize === 'md'\n                                ? 'bannerPositionM'\n                                : deviceSize === 'lg'\n                                ? 'bannerPositionL'\n                                : 'bannerPositionXL'\n                        }\n                        timer={link.featuredTimerDate}\n                        completeText={link.featuredTimerText}\n                        altColor={link.featuredAltStyle}\n                    />\n                    <ModalMedia\n                        customFont={customFont}\n                        link={link}\n                        type={link.type}\n                        deviceSize={deviceSize}\n                    />\n                </div>\n            ) : (\n                <ModalMedia\n                    customFont={customFont}\n                    link={link}\n                    type={link.type}\n                    deviceSize={deviceSize}\n                />\n            )}\n        </div>\n    );\n};\n\nItemLinks.propTypes = {\n    link: PropTypes.object,\n    deviceSize: PropTypes.string,\n    customFont: PropTypes.string,\n};\n\nexport default ItemLinks;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { createUseStyles } from 'react-jss';\nimport { Image, Header } from 'semantic-ui-react';\nimport Banner from '../Banner/Banner';\n\nconst useStyles = createUseStyles({\n    customFont: {\n        'font-family': (props) =>\n            props.customFont ? [props.customFont, '!important'] : '',\n    },\n});\n\nconst Still_External = ({ link, deviceSize, ...props }) => {\n    const classes = useStyles(props);\n\n    return (\n        <div>\n            {link.featured ? (\n                <div>\n                    <Banner\n                        text={link.featuredText}\n                        color={link.featuredColor}\n                        bannerSide={link.bannerSide}\n                        deviceSize={\n                            deviceSize === 'xs'\n                                ? 'bannerPositionS'\n                                : deviceSize === 'md'\n                                ? 'bannerPositionM'\n                                : deviceSize === 'lg'\n                                ? 'bannerPositionL'\n                                : 'bannerPositionXL'\n                        }\n                        timer={link.featuredTimerDate}\n                        completeText={link.featuredTimerText}\n                        altColor={link.featuredAltStyle}\n                    />\n                    <a href={link.link}>\n                        <Image\n                            wrapped\n                            size=\"medium\"\n                            src={link.mainMedia.link}\n                        />\n                        <Header\n                            as=\"h3\"\n                            textAlign=\"center\"\n                            className={`RCborderNone RCtopPushoff ${classes.customFont}`}\n                        >\n                            {link.modalAlternativeText.text\n                                ? link.modalAlternativeText.text\n                                : link.mainMedia.mediaText}\n                        </Header>\n                    </a>\n                </div>\n            ) : (\n                <a href={link.link}>\n                    <Image wrapped size=\"medium\" src={link.mainMedia.link} />\n                    <Header\n                        as=\"h3\"\n                        textAlign=\"center\"\n                        className={`RCborderNone RCtopPushoff TEST ${classes.customFont}`}\n                    >\n                        {link.modalAlternativeText.text\n                            ? link.modalAlternativeText.text\n                            : link.mainMedia.mediaText}\n                    </Header>\n                </a>\n            )}\n        </div>\n    );\n};\n\nStill_External.propTypes = {\n    link: PropTypes.object,\n    deviceSize: PropTypes.string,\n};\n\nexport default Still_External;\n","import PropTypes from \"prop-types\";\nimport { Dot } from \"pure-react-carousel\";\nimport React from \"react\";\nimport { Button, Container } from \"semantic-ui-react\";\n\nconst CustomDotGroup = ({ slides, size }) => (\n    <Container textAlign=\"center\">\n        <Button.Group size={size}>\n            {[...Array(slides).keys()].map((slide) => (\n                <Button as={Dot} key={slide} icon=\"circle\" slide={slide} />\n            ))}\n        </Button.Group>\n    </Container>\n);\n\nCustomDotGroup.defaultProps = {\n    size: \"mini\",\n};\n\nCustomDotGroup.propTypes = {\n    slides: PropTypes.number.isRequired,\n    size: PropTypes.string,\n};\n\nexport default CustomDotGroup;\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport {\n    CarouselProvider,\n    Slide,\n    Slider,\n    Image,\n    ButtonBack,\n    ButtonNext,\n} from 'pure-react-carousel';\nimport { Divider, Modal, Grid } from 'semantic-ui-react';\nimport ModalHeader from '../ModalHeader/ModalHeader';\nimport ModalLinks from '../ModalLinks/ModalLinks';\nimport CustomDotGroup from './CustomDotGroup';\nimport 'pure-react-carousel/dist/react-carousel.es.css';\n\nconst ImageCarousel = ({\n    collection,\n    linkType,\n    link,\n    name,\n    additionalLinks,\n}) => {\n    const [open, setOpen] = useState(false);\n    const dummyHeaderProps = {\n        modalAlternativeText: {\n            text: '',\n        },\n        name,\n    };\n\n    return (\n        <>\n            <CarouselProvider\n                naturalSlideWidth={100}\n                naturalSlideHeight={110}\n                totalSlides={collection.length}\n                interval={collection.speed}\n                isPlaying\n            >\n                {linkType === 'internal' ? (\n                    <Slider>\n                        {collection.map((img, i) => (\n                            <Slide\n                                key={`Slide-image-${i + 1}`}\n                                index={i}\n                                onClick={() => setOpen(true)}\n                            >\n                                <Image src={img} />\n                            </Slide>\n                        ))}\n                    </Slider>\n                ) : linkType === 'external' ? (\n                    <Slider>\n                        {collection.map((img, i) => (\n                            <Slide\n                                key={`Slide-image-${i + 1}`}\n                                index={i}\n                                tag=\"a\"\n                                href={link}\n                            >\n                                <Image src={img} />\n                            </Slide>\n                        ))}\n                    </Slider>\n                ) : (\n                    <Slider>\n                        {collection.map((img, i) => (\n                            <Slide key={`Slide-image-${i + 1}`} index={i}>\n                                <Image src={img} />\n                            </Slide>\n                        ))}\n                    </Slider>\n                )}\n\n                <Divider />\n                {collection.length > 7 ? (\n                    <>\n                        <ButtonBack className={'ui button'}>Back</ButtonBack>\n                        <ButtonNext className={'ui button'}>Next</ButtonNext>\n                    </>\n                ) : (\n                    <CustomDotGroup slides={collection.length} />\n                )}\n            </CarouselProvider>\n            {linkType === 'internal' ? (\n                <Modal\n                    size=\"small\"\n                    onClose={() => setOpen(false)}\n                    onOpen={() => setOpen(true)}\n                    open={open}\n                    closeIcon\n                >\n                    <Grid centered columns={2}>\n                        <Grid.Row className=\"RCTitleFix\">\n                            <ModalHeader data={dummyHeaderProps} />\n                        </Grid.Row>\n                        <Grid.Row>\n                            <Modal.Content\n                                image\n                                className=\"RCCenter RCPushDown\"\n                            >\n                                {additionalLinks\n                                    ? additionalLinks.map((element, i) => {\n                                          return (\n                                              <ModalLinks\n                                                  key={`links-modal-${i + 1}`}\n                                                  link={element}\n                                              />\n                                          );\n                                      })\n                                    : ' '}\n                            </Modal.Content>\n                        </Grid.Row>\n                    </Grid>\n                </Modal>\n            ) : (\n                ''\n            )}\n        </>\n    );\n};\n\nImageCarousel.propTypes = {\n    collection: PropTypes.array,\n    linkType: PropTypes.string,\n    link: PropTypes.string,\n    name: PropTypes.string,\n    additionalLinks: PropTypes.array,\n};\n\nexport default ImageCarousel;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Header } from 'semantic-ui-react';\nimport Banner from '../Banner/Banner';\nimport ImageCarousel from './ImageCarousel';\n\nconst Slideshow = ({ link, deviceSize, customFont }) => {\n    return (\n        <div>\n            {link.featured ? (\n                <div>\n                    <Banner\n                        text={link.featuredText}\n                        color={link.featuredColor}\n                        bannerSide={link.bannerSide}\n                        deviceSize={\n                            deviceSize === 'xs'\n                                ? 'bannerPositionS'\n                                : deviceSize === 'md'\n                                ? 'bannerPositionM'\n                                : deviceSize === 'lg'\n                                ? 'bannerPositionL'\n                                : 'bannerPositionXL'\n                        }\n                        timer={link.featuredTimerDate}\n                        completeText={link.featuredTimerText}\n                        altColor={link.featuredAltStyle}\n                    />\n                    <ImageCarousel\n                        collection={link.mainMedia.collection}\n                        linkType={link.mainMedia.linkType}\n                        link={link.link}\n                        name={link.mainMedia.mediaText}\n                        additionalLinks={link.additionalLinks}\n                    />\n                    <Header\n                        as=\"h3\"\n                        textAlign=\"center\"\n                        className=\"RCborderNone RCtopPushoff\"\n                    >\n                        {link.modalAlternativeText.text\n                            ? link.modalAlternativeText.text\n                            : link.mainMedia.mediaText}\n                    </Header>\n                </div>\n            ) : (\n                <div>\n                    <ImageCarousel\n                        collection={link.mainMedia.collection}\n                        link={link.link}\n                        linkType={link.mainMedia.linkType}\n                        name={link.mainMedia.mediaText}\n                        additionalLinks={link.additionalLinks}\n                    />\n                    <Header\n                        as=\"h3\"\n                        textAlign=\"center\"\n                        className=\"RCborderNone RCtopPushoff\"\n                    >\n                        {link.modalAlternativeText.text\n                            ? link.modalAlternativeText.text\n                            : link.mainMedia.mediaText}\n                    </Header>\n                </div>\n            )}\n        </div>\n    );\n};\n\nSlideshow.propTypes = {\n    link: PropTypes.object,\n    deviceSize: PropTypes.string,\n    customFont: PropTypes.string,\n};\n\nexport default Slideshow;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Modal, Button, Grid, Header } from 'semantic-ui-react';\nimport ModalHeader from '../ModalHeader/ModalHeader';\nimport './BioModal.css';\n\nconst BioModal = ({ link }) => {\n    const coloredButton = link.buttonColor;\n\n    return (\n        <div>\n            <Modal\n                size=\"small\"\n                trigger={\n                    <Button\n                        fluid\n                        size=\"big\"\n                        color={link.buttonColor}\n                        {...(coloredButton\n                            ? {\n                                  className: `RCPadding fontColor ${link.fontColor}`,\n                              }\n                            : { className: 'RCPadding RCWhiteBG' })}\n                    >\n                        {link.name}\n                    </Button>\n                }\n                closeIcon\n            >\n                <Grid centered columns={2}>\n                    {link.modalAlternativeText.removed ? (\n                        ''\n                    ) : (\n                        <Grid.Row className=\"RCTitleFix\">\n                            <ModalHeader link={link} />\n                        </Grid.Row>\n                    )}\n                    <Grid.Row className=\"RLBio\">\n                        <Modal.Content image className=\"RCCenter RCPushDown\">\n                            {link.bioContent.map((x, i) => (\n                                <Header as=\"h2\" key={`Bio-header-${i + 1}`}>\n                                    {x.header}\n                                    <Header.Subheader content={x.subHeader} />\n                                </Header>\n                            ))}\n                        </Modal.Content>\n                    </Grid.Row>\n                </Grid>\n            </Modal>\n        </div>\n    );\n};\n\nBioModal.propTypes = {\n    link: PropTypes.object,\n};\n\nexport default BioModal;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport BioModal from './BioModal';\nimport Banner from '../Banner/Banner';\nimport '../Links/Links.css';\n\nconst Bio = ({ link, deviceSize, customFont }) => {\n    return (\n        <div>\n            {link.featured ? (\n                <div>\n                    <Banner\n                        text={link.featuredText}\n                        color={link.featuredColor}\n                        bannerSide={link.bannerSide}\n                        deviceSize={\n                            deviceSize === 'xs'\n                                ? 'bannerPositionS'\n                                : deviceSize === 'md'\n                                ? 'bannerPositionM'\n                                : deviceSize === 'lg'\n                                ? 'bannerPositionL'\n                                : 'bannerPositionXL'\n                        }\n                        timer={link.featuredTimerDate}\n                        completeText={link.featuredTimerText}\n                        altColor={link.featuredAltStyle}\n                    />\n                    <BioModal link={link} />\n                </div>\n            ) : (\n                <BioModal link={link} />\n            )}\n        </div>\n    );\n};\n\nBio.propTypes = {\n    link: PropTypes.object,\n    deviceSize: PropTypes.string,\n    customFont: PropTypes.string,\n};\n\nexport default Bio;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport InternalLinks from '../InternalLinks/InternalLinks';\nimport ExternalLinks from '../ExternalLinks/ExternalLinks';\nimport ItemLinks from '../ItemLinks/ItemLinks';\nimport StillExternal from '../Still_External/Still_External';\nimport Slideshow from '../Slideshow/Slideshow';\nimport Bio from '../Bio/Bio';\nimport { Segment } from 'semantic-ui-react';\nimport './Links.css';\n\nconst Links = ({ link, deviceSize, customFont }) => {\n    let spaced = link.linkSpaced;\n    let colored = link.colored;\n\n    return (\n        <div>\n            {link.type === 'internal' ? (\n                <Segment\n                    color={link.color}\n                    {...(colored ? { inverted: true } : {})}\n                    {...(spaced\n                        ? {\n                              raised: true,\n                              className: `pushDown ${link.additionalStyle} ${\n                                  link.color ? '' : link.colorOveride\n                              }`,\n                          }\n                        : {})}\n                >\n                    <InternalLinks\n                        link={link}\n                        deviceSize={deviceSize}\n                        customFont={customFont}\n                    />\n                </Segment>\n            ) : link.type === 'item' ? (\n                <Segment\n                    color={link.color}\n                    {...(colored ? { inverted: true } : {})}\n                    {...(spaced\n                        ? {\n                              raised: true,\n                              className: `pushDown ${link.additionalStyle} ${\n                                  link.color ? '' : link.colorOveride\n                              }`,\n                          }\n                        : {})}\n                >\n                    <ItemLinks\n                        link={link}\n                        deviceSize={deviceSize}\n                        customFont={customFont}\n                    />\n                </Segment>\n            ) : link.type === 'still/external' ? (\n                <Segment\n                    color={link.color}\n                    {...(colored ? { inverted: true } : {})}\n                    {...(spaced\n                        ? {\n                              raised: true,\n                              className: `pushDown ${link.additionalStyle} ${\n                                  link.color ? '' : link.colorOveride\n                              }`,\n                          }\n                        : {})}\n                >\n                    <StillExternal\n                        link={link}\n                        deviceSize={deviceSize}\n                        customFont={customFont}\n                    />\n                </Segment>\n            ) : link.type === 'slideshow' ? (\n                <Segment\n                    color={link.color}\n                    {...(colored ? { inverted: true } : {})}\n                    {...(spaced\n                        ? {\n                              raised: true,\n                              className: `pushDown ${link.additionalStyle} ${\n                                  link.color ? '' : link.colorOveride\n                              }`,\n                          }\n                        : {})}\n                >\n                    <Slideshow\n                        link={link}\n                        deviceSize={deviceSize}\n                        customFont={customFont}\n                    />\n                </Segment>\n            ) : link.type === 'bio' ? (\n                <Segment\n                    color={link.color}\n                    {...(colored ? { inverted: true } : {})}\n                    {...(spaced\n                        ? {\n                              raised: true,\n                              className: `pushDown ${link.additionalStyle} ${\n                                  link.color ? '' : link.colorOveride\n                              }`,\n                          }\n                        : {})}\n                >\n                    <Bio\n                        link={link}\n                        deviceSize={deviceSize}\n                        customFont={customFont}\n                    />\n                </Segment>\n            ) : (\n                <Segment\n                    color={link.color}\n                    {...(colored ? { inverted: true } : {})}\n                    {...(spaced\n                        ? {\n                              raised: true,\n                              className: `pushDown ${link.additionalStyle} ${\n                                  link.color ? '' : link.colorOveride\n                              }`,\n                          }\n                        : {})}\n                >\n                    <ExternalLinks\n                        link={link}\n                        deviceSize={deviceSize}\n                        customFont={customFont}\n                    />\n                </Segment>\n            )}\n        </div>\n    );\n};\n\nLinks.propTypes = {\n    link: PropTypes.object,\n    deviceSize: PropTypes.string,\n    customFont: PropTypes.string,\n};\n\nexport default Links;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Header } from 'semantic-ui-react';\nimport { createUseStyles } from 'react-jss';\nimport Links from '../Links/Links';\nimport './LinkGroup.css';\n\nconst useStyles = createUseStyles({\n    customFont: {\n        'font-family': (props) => [props.customFont, '!important'],\n    },\n});\n\nconst LinkGroup = ({ links, deviceSize, ...props }) => {\n    const classes = useStyles(props);\n\n    return (\n        <div className=\"stretched\">\n            <Header\n                as=\"h2\"\n                color={\n                    links.groupColor.startsWith('RL')\n                        ? 'black'\n                        : links.groupColor\n                }\n                className={\n                    links.groupColor.startsWith('RL') ? links.groupColor : ''\n                }\n            >\n                <span>{links.groupName}</span>\n            </Header>\n\n            <div>\n                {links.group.map((element, i) => {\n                    return (\n                        <Links\n                            key={`Social-links-${i + 1}`}\n                            link={element}\n                            deviceSize={deviceSize}\n                            customFont={props.customFont}\n                        />\n                    );\n                })}\n            </div>\n        </div>\n    );\n};\n\nLinkGroup.propTypes = {\n    links: PropTypes.object,\n    deviceSize: PropTypes.string,\n};\n\nexport default LinkGroup;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Grid, GridColumn, Segment, Image } from 'semantic-ui-react';\nimport Profile from './Profile/Profile';\nimport LinkGroup from './LinkGroup/LinkGroup';\nimport LogoColor from '../../assets/Logo.png';\nimport LogoWhite from '../../assets/LogoWhite.png';\nimport './Home.css';\n\nconst whichLogo = (logo) => {\n    return logo === 'white' ? LogoWhite : LogoColor;\n};\n\nconst Home = ({\n    deviceSize,\n    socialLinks,\n    profileTitle,\n    profileImage,\n    linkGroups,\n    logo,\n    background,\n    customFont,\n}) => {\n    const RLLogoLink = 'https://rightclickrva.com/business';\n\n    return (\n        <Grid centered className=\"RCMarginTop-1\">\n            <Grid.Row className=\"RCMarginBottom-2\">\n                <GridColumn>\n                    <Profile\n                        socialLinks={socialLinks}\n                        profileImage={profileImage}\n                        profileTitle={profileTitle}\n                        customFont={customFont}\n                    />\n                </GridColumn>\n            </Grid.Row>\n            {linkGroups.map((linkData, index) => {\n                return (\n                    <Grid.Row\n                        key={`linkgroup-${index + 1}`}\n                        className=\"RCNoTopPadding RCMarginBottom-2\"\n                    >\n                        <LinkGroup\n                            key={index}\n                            links={linkData}\n                            deviceSize={deviceSize}\n                            customFont={customFont}\n                        />\n                    </Grid.Row>\n                );\n            })}\n            <div>\n                {background.logoLink ? (\n                    <Grid.Row className=\"RCLogoZeroBottom\">\n                        <Segment basic className=\"RCLogoZeroBottom\">\n                            <Image\n                                className=\"RCLogoZeroBottom\"\n                                src={background.logoLink}\n                                as=\"a\"\n                                size=\"tiny\"\n                                href={background.logoActiveLink}\n                                target=\"_blank\"\n                                spaced\n                            />\n                        </Segment>\n                    </Grid.Row>\n                ) : (\n                    ''\n                )}\n                <Segment\n                    basic\n                    className={`${\n                        background.logoLink\n                            ? 'RCDoubleLogo'\n                            : 'RCMarginBottom-1'\n                    }`}\n                >\n                    <Image\n                        src={whichLogo(logo)}\n                        as=\"a\"\n                        size=\"small\"\n                        href={RLLogoLink}\n                        target=\"_blank\"\n                        spaced\n                    />\n                </Segment>\n            </div>\n        </Grid>\n    );\n};\n\nHome.propTypes = {\n    deviceSize: PropTypes.string,\n    socialLinks: PropTypes.object,\n    profileTitle: PropTypes.object,\n    profileImage: PropTypes.string,\n    linkGroups: PropTypes.object,\n    logo: PropTypes.string,\n    background: PropTypes.object,\n    customFont: PropTypes.string,\n};\n\nexport default Home;\n","// Custom Colors = [RLGold,RLWhite]\n/* social link custom colors {\n   circle colors: [RLWhite]\n   icon colors: [RLRed]\n}*/\nexport const TITLE = {\n    title: 'Rayzor Ramon',\n    color: 'RLWhite',\n};\nexport const LOGO = 'colored';\nexport const PROFILE_PIC =\n    'https://res.cloudinary.com/rightlink/image/upload/v1640960524/RazorRamon/razorRamon_hwe9lz.jpg';\nexport const BACKGROUND = {\n    image: false,\n    imageLink: '',\n    color: 'background-image: linear-gradient(to right bottom, #12000d, #140016, #12001e, #140728, #110e33, #0b133e, #1a194d, #2a1e5c, #3b236a, #4e2778);',\n};\nexport const SOCIAL_LINKS = {\n    group: [\n        {\n            name: 'Instagram',\n            iconName: 'instagram',\n            link: 'https://www.instagram.com/rayzor_ramon_the_barber_',\n            color: 'red',\n            inverted: true,\n            secondaryColor: '',\n            surrounded: 'circular',\n            surroundedInColor: true,\n        },\n        {\n            name: 'Twitter',\n            iconName: 'twitter',\n            link: 'https://twitter.com/rayzzorramon',\n            color: 'red',\n            inverted: true,\n            secondaryColor: '',\n            surrounded: 'circular',\n            surroundedInColor: true,\n        },\n        {\n            name: 'Facebook',\n            iconName: 'facebook f',\n            link: 'https://www.facebook.com/Rayzor-Ramon-The-Bar-Ber-202433150376767/',\n            color: 'red',\n            inverted: true,\n            secondaryColor: '',\n            surrounded: 'circular',\n            surroundedInColor: true,\n        },\n        {\n            name: 'Youtube',\n            iconName: 'youtube',\n            link: 'https://youtube.com/channel/UCwUd_9OcxPl9qOyEk6PRihA',\n            color: 'red',\n            inverted: true,\n            secondaryColor: '',\n            surrounded: 'circular',\n            surroundedInColor: true,\n        },\n    ],\n};\n// featuredTimerDate formats inclued '2020-02-01T01:02:03' or milliseconds e.g 1580518923000 - documentation here https://github.com/ndresx/react-countdown\n// for media as links you must set type as 'item' and mainMedia.type as either 'still, mp4, or other(not implemented yet)'\nexport const LINK_GROUP_1 = {\n    groupName: 'Book a Cut Today',\n    groupColor: 'RLWhite',\n    groupFont: '',\n    group: [\n        {\n            name: 'Personal Appointments',\n            link: 'https://book.thecut.co/RAYZORAMONTHEBARBER',\n            linkSpaced: true,\n            type: 'external',\n            typeAction: '',\n            internal: false,\n            featured: false,\n            featuredText: '',\n            featuredTimerDate: '',\n            featuredTimerText: '',\n            featuredColor: '',\n            featuredAltStyle: '',\n            pinned: false,\n            mainMedia: {},\n            additionalLinks: [],\n            color: 'red',\n            colorOveride: '',\n            fontColor: '',\n            colored: false,\n            buttonColor: '',\n            bannerSide: 'left',\n            additionalStyle: 'longText',\n            modalAlternativeText: {\n                removed: false,\n                text: '',\n            },\n        },\n        {\n            name: 'Shop Appointments',\n            link: 'https://online.getsquire.com/book/taylors-barbershop-richmond/professional/sergio-31',\n            linkSpaced: true,\n            type: 'external',\n            typeAction: '',\n            internal: false,\n            featured: false,\n            featuredText: '',\n            featuredTimerDate: '',\n            featuredTimerText: '',\n            featuredColor: '',\n            featuredAltStyle: '',\n            pinned: false,\n            mainMedia: {},\n            additionalLinks: [],\n            color: 'red',\n            colorOveride: '',\n            fontColor: '',\n            colored: false,\n            buttonColor: '',\n            bannerSide: 'left',\n            additionalStyle: 'longText',\n            modalAlternativeText: {\n                removed: false,\n                text: '',\n            },\n        },\n        {\n            name: \"Rayzor Ramon's Store\",\n            link: 'https://rayzorramons.com',\n            linkSpaced: true,\n            type: 'external',\n            typeAction: '',\n            internal: false,\n            featured: false,\n            featuredText: '',\n            featuredTimerDate: '',\n            featuredTimerText: '',\n            featuredColor: '',\n            featuredAltStyle: '',\n            pinned: false,\n            mainMedia: {},\n            additionalLinks: [],\n            color: 'red',\n            colorOveride: '',\n            fontColor: '',\n            colored: false,\n            buttonColor: '',\n            bannerSide: 'left',\n            additionalStyle: 'longText',\n            modalAlternativeText: {\n                removed: false,\n                text: '',\n            },\n        },\n        {\n            name: 'Slideshow',\n            link: 'https://venmo.com/code?user_id=2920916300333056019&created=1647041532.732115&printed=1',\n            linkSpaced: true,\n            type: 'slideshow',\n            typeAction: '',\n            internal: false,\n            featured: false,\n            featuredText: '',\n            featuredTimerDate: '',\n            featuredTimerText: '',\n            featuredColor: '',\n            featuredAltStyle: '',\n            pinned: true,\n            mainMedia: {\n                type: 'slideshow',\n                linkType: 'internal',\n                speed: 1000,\n                mediaText: 'Purchase a Proof',\n                collection: [\n                    'https://res.cloudinary.com/rightlink/image/upload/v1647041982/RazorRamon/proofs-2_cwuvkr.jpg',\n                    'https://res.cloudinary.com/rightlink/image/upload/v1647040173/RazorRamon/proofs-1_y0q12y.jpg',\n                ],\n            },\n            additionalLinks: [\n                {\n                    name: 'Venmo',\n                    link: 'https://venmo.com/code?user_id=2920916300333056019&created=1647041532.732115&printed=1',\n                },\n                {\n                    name: 'Cash App',\n                    link: 'https://cash.app/$RaYZorRamon',\n                },\n                {\n                    name: 'Store',\n                    link: 'https://google.com',\n                },\n            ],\n            color: 'red',\n            colorOveride: '',\n            fontColor: '',\n            colored: false,\n            buttonColor: '',\n            bannerSide: 'left',\n            additionalStyle: 'longText',\n            modalAlternativeText: {\n                removed: false,\n                text: '',\n            },\n            bioContent: [],\n        },\n    ],\n};\n\nexport const Archived = [\n    {\n        name: 'Beard Care & Apparel',\n        link: 'https://rayzorramonthebarber.bigcartel.com',\n        linkSpaced: true,\n        type: 'external',\n        typeAction: '',\n        internal: false,\n        featured: false,\n        featuredText: '',\n        featuredTimerDate: '',\n        featuredTimerText: '',\n        featuredColor: '',\n        featuredAltStyle: '',\n        pinned: false,\n        mainMedia: {},\n        additionalLinks: [],\n        color: 'red',\n        colorOveride: '',\n        fontColor: '',\n        colored: false,\n        buttonColor: '',\n        bannerSide: 'left',\n        additionalStyle: 'longText',\n        modalAlternativeText: {\n            removed: false,\n            text: '',\n        },\n    },\n];\n","import React from 'react';\nimport Home from './Home/components/Home';\nimport { useMediaPredicate } from 'react-media-hook';\nimport GoogleFontLoader from 'react-google-font-loader';\nimport {\n    LOGO,\n    BACKGROUND,\n    SOCIAL_LINKS,\n    LINK_GROUP_1,\n    TITLE,\n    PROFILE_PIC,\n} from './assets/usersData/RazorRamon/data';\nimport { Helmet } from 'react-helmet';\nimport './App.css';\n\nconst linkGroups = [LINK_GROUP_1];\n\nconst App = () => {\n    const xsScreen = useMediaPredicate('(max-width: 430px)');\n    const mdScreen = useMediaPredicate('(max-width: 768px)');\n    const lgScreen = useMediaPredicate('(max-width: 1024px)');\n\n    return (\n        <div>\n            {/* {console.log('window Width', window.innerWidth)} */}\n            <Helmet>\n                <title>Right-Link</title>\n                <style>\n                    {`\n              .RLgradient {\n                ${\n                    BACKGROUND.imageLink\n                        ? BACKGROUND.imageLink\n                        : BACKGROUND.color\n                        ? BACKGROUND.color\n                        : ''\n                }\n               }\n                .root {\n                    height: 100%;\n                    overflow-x: hidden;\n                }\n            `}\n                </style>\n            </Helmet>\n            {LINK_GROUP_1.groupFont ? (\n                <GoogleFontLoader\n                    fonts={[\n                        {\n                            font: LINK_GROUP_1.groupFont,\n                            weights: [400],\n                        },\n                    ]}\n                />\n            ) : (\n                ''\n            )}\n            <Home\n                deviceSize={\n                    xsScreen ? 'xs' : mdScreen ? 'md' : lgScreen ? 'lg' : 'xl'\n                }\n                socialLinks={SOCIAL_LINKS}\n                profileTitle={TITLE}\n                profileImage={PROFILE_PIC}\n                linkGroups={linkGroups}\n                logo={LOGO}\n                background={BACKGROUND}\n                customFont={LINK_GROUP_1.groupFont}\n            />\n        </div>\n    );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}